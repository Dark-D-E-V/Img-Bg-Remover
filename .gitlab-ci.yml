# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:
  - build

build:
  stage: build
  image: python:latest
  variables:
    PYTHON_VERSIONS: "3.10, 3.11, 3.12"
  script:
  - apt-get update && apt-get install -y python3-pip python3-dev git curl build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev git
  - curl https://pyenv.run | bash
  - export PATH="/root/.pyenv/bin:$PATH"
  - eval "$(pyenv init --path)"
  - eval "$(pyenv virtualenv-init -)"
  - for PYTHON_VERSION in ${PYTHON_VERSIONS//, / }; do
      echo "Setting up Python $PYTHON_VERSION";
      pyenv install $PYTHON_VERSION;
      pyenv global $PYTHON_VERSION;
      python --version;
      python -m pip install --upgrade pip;
      pip install -r requirements.txt;
      pip install pyOpenSSL; # If OpenSSL bindings are needed
      python manage.py test;
    done
  only:
    - master
  except:
    - tags
